Предварительно установите библиотеку boost из репозиториев вашего Linux дистрибутива или с официального сайта.
Убедитесь, что стоят пакеты libboost_system devel, libboost_thread devel, libboost_filesystem devel


Сборка консольных приложений из серверной части.

Исходный код обоих консольных приложений, работающих на сервере, находится в папке “otus-cpp-prof-hw-14-server”.

Порядок сборки серверной части следующий:
1. Создайте папку “build” внутри папки “otus-cpp-prof-hw-14-server”.
2. Откройте консоль.
3. Перейдите в консоли в папку "build".

requires the language dialect "CXX20"

export CC=/usr/bin/gcc-13
export CXX=/usr/bin/g++-13

4. Выполните команду:

cmake ..

Если появятся ошибки, содержащие " requires the language dialect "CXX20" ", значит необходимо обновить cmake до версии, поддерживающей 20 стандарт C++. 

Если будет ошибка, связанная с sqlite, проверьте доступность архива по ссылке https://www.sqlite.org/snapshot/sqlite-snapshot-202401231504.tar.gz
Если архив недоступен, замените эту ссылку в файле CMakeLists.txt на актуальную.

Аналогично с nlohmann/json.
Проверьте доступность архива по ссылке https://github.com/nlohmann/json/releases/download/v3.11.2/json.tar.xz
Если архив не доступен, замените эту ссылку в файле CMakeLists.txt на актуальную.

5. Далее выполните:

cmake --build . --config Release


После успешной компиляции в папке build появится папка release с двумя исполнимыми файлами:
1. db_creator.exe
2. task_server.exe


Сборка клиентской части.
Исходный код клиентской части проекта находится в  папке “otus-cpp-prof-hw-14-client”. 

Для сборки потребуется фреймворк Qt, версии 5.15

Если предпочтительна сборка из консоли, то под ОС Linux нужно выполнить следующее:
1.	Рядом с папкой TaskClient создать папку build
2.	Открыть консоль и перейти в папку build
3.	Выполните команду: qmake-qt5 ../TaskClient/TaskClient.pro
4.	Убедитесь, что появился файл Makefile
5.	Выполните команду: make
6.	Убедитесь, что в папке build появился исполнимый файл TaskClient 
